{"version":3,"sources":["dialect/dialect.js"],"names":["Plot","lazy","jss","create","plugins","jssPreset","rtl","rtlTheme","createMuiTheme","direction","Dialect","useState","GLF","EGY","IRQ","LEV","NOR","preds","setPreds","container","alignItems","item","style","margin","marginTop","GlobePlot","ControlPanel","props","theme","useTheme","xs","useMediaQuery","breakpoints","down","sm","md","lg","size","width","height","fallback","data","type","locations","z","text","zmax","zmin","colorscale","showscale","layout","l","r","t","b","geo","projection","scale","center","lon","lat","config","displayModeBar","responsive","textField","setTextField","updatePreds","message","JSON","stringify","fetch","method","headers","body","then","resp","json","prediction","useEffect","timeoutId","setTimeout","clearTimeout","justify","padding","dir","onChange","e","target","value","label","display","placeholder","helperText","fullWidth","multiline"],"mappings":"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","file":"static/js/5.63d0e02e.chunk.js","sourcesContent":["import { \r\n    Container, \r\n    createMuiTheme, \r\n    Grid, \r\n    TextField, \r\n    StylesProvider, \r\n    jssPreset, \r\n    ThemeProvider, \r\n    useMediaQuery, \r\n    useTheme,\r\n    Button\r\n } from \"@material-ui/core\";\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport { useEffect, useState, lazy, Suspense } from \"react\";\r\n\r\nconst Plot = lazy(() => import(\"react-plotly.js\"));\r\n\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nconst rtlTheme = createMuiTheme({\r\n    direction: 'rtl',\r\n});\r\n  \r\n\r\nexport default function Dialect(){\r\n    let [preds, setPreds] = useState({GLF: 0, EGY: 0, IRQ: 0, LEV: 0, NOR: 0})\r\n    return (\r\n        <StylesProvider jss={jss}>\r\n        <Grid container alignItems=\"stretch\" direction=\"column\">\r\n            <Grid item style={{margin: \"auto\", marginTop: \"3em\"}}>\r\n                <GlobePlot preds={preds}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <ControlPanel setPreds={setPreds}/>\r\n            </Grid>\r\n        </Grid>\r\n        </StylesProvider>\r\n    )\r\n}\r\n\r\nfunction GlobePlot(props){\r\n    const preds = props.preds\r\n\r\n    const theme = useTheme();\r\n    const xs = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n    const sm = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    const md = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n    const lg = useMediaQuery(theme.breakpoints.down(\"lg\"));\r\n    const xl = useMediaQuery(theme.breakpoints.down(\"xl\"));\r\n    \r\n    const size = () => {\r\n        if (xs)\r\n            return {width: 300, height: 150}\r\n        else if (sm)\r\n            return {width: 500, height: 250}\r\n        else if (md)\r\n            return {width: 700, height: 350}    \r\n        else if (lg)\r\n            return {width: 900, height: 450}        \r\n        else if (xl)\r\n            return {width: 1000, height: 500};\r\n        else\r\n            return {width: 1000, height: 500};\r\n    }\r\n    // alert(xs || sm || md || lg || xl)\r\n    return (\r\n        // SORRY FOR SHIT CODE\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <Plot\r\n                data={[\r\n                    {\r\n                    type: 'choropleth',\r\n                    locations: [\"EGY\", // Egypt\r\n                                \"SAU\", \"KWT\", \"QAT\", \"ARE\", \"BHR\", \"OMN\", // GLF\r\n                                \"IRQ\", // IRQ\r\n                                \"SYR\", \"PSE\", \"JOR\", // LEV\r\n                                \"MAR\", \"DZA\", \"LBY\", \"TUN\"], // NOR\r\n                    z: [preds.EGY, \r\n                        preds.GLF, preds.GLF, preds.GLF, preds.GLF, preds.GLF, preds.GLF,\r\n                        preds.IRQ,\r\n                        preds.LEV, preds.LEV, preds.LEV,\r\n                        preds.NOR, preds.NOR, preds.NOR, preds.NOR],\r\n                    text: \"SA\",\r\n                    zmax: 1,\r\n                    zmin: 0,\r\n                    colorscale: \"Reds\",\r\n                    showscale: false,\r\n                    }\r\n                ]}\r\n                layout={\r\n                    {\r\n                        // title: \"Drawing\",\r\n                        width: size().width,\r\n                        height: size().height,\r\n                        margin: {\r\n                            l: 0,\r\n                            r: 0, \r\n                            t: 0,\r\n                            b: 0,\r\n                        },\r\n                        geo: {\r\n                            projection: {\r\n                                scale: 4.25,\r\n                                type: \"robinson\",   \r\n                            },  \r\n                            center: {\r\n                                    lon: 22,\r\n                                    lat: 30,\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n                config={{\r\n                    displayModeBar: false,\r\n                    responsive: true,\r\n                }}\r\n                \r\n            />\r\n        </Suspense>\r\n        // END SHIT CODE\r\n    )    \r\n}\r\n\r\nfunction ControlPanel(props){\r\n    const setPreds = props.setPreds;\r\n\r\n    let [textField, setTextField] = useState(\"\");\r\n    \r\n    const updatePreds = () => {\r\n        const message = JSON.stringify({text: textField});\r\n        fetch(\"/api/text\", {\r\n            method: \"POST\", \r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'        \r\n            },\r\n            body: message \r\n        })\r\n            .then(resp => resp.json())\r\n            .then(resp => setPreds(resp.prediction));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timeoutId = setTimeout(updatePreds, 1000);\r\n        return () => clearTimeout(timeoutId);\r\n      }, [textField]);\r\n    \r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"flex-end\" alignItems=\"stretch\" style={{padding: \"5em\", marginTop: \"1em\"}}>\r\n            {/* <Grid item style={{width: \"80%\", minWidth: \"80%\", marginBottom: \"5em\"}}>\r\n                <PercentageResults/>\r\n            </Grid> */}\r\n            <Grid item>\r\n                <ThemeProvider theme={rtlTheme}>\r\n                <div dir=\"rtl\">\r\n                <TextField\r\n                    onChange={e => setTextField(e.target.value)}\r\n                    value={textField}\r\n                    label=\"Predict Region\"\r\n                    style={{width: \"auto\", display: \"block\"}}\r\n                    placeholder=\"اهلا وسهلا\"\r\n                    helperText=\"Enter text in Arabic\"\r\n                    fullWidth\r\n                    multiline\r\n                    margin=\"normal\"\r\n                />\r\n                </div>\r\n                </ThemeProvider>\r\n            </Grid>\r\n            {/* <Grid item style={{paddingTop: \"1em\"}}>\r\n                <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                    <Button variant=\"contained\" onClick={e => updatePreds()}>SUBMIT</Button>\r\n                </Grid>\r\n                </Grid>\r\n            </Grid> */}\r\n        </Grid>\r\n    )\r\n}\r\n\r\n// function PercentageResults(props){\r\n//     let regions = [\"Gulf\", \"Eygpt\", \"Iraq\", \"Lev\", \"NOR\"]\r\n//     return (\r\n//         <Grid container justify=\"space-between\" >\r\n//             {regions.map(region => {\r\n//                 return (\r\n//                     <Grid item>\r\n//                         {region}: 100%\r\n//                     </Grid>\r\n//                 )\r\n//             })}\r\n//         </Grid>\r\n//     )\r\n// }"],"sourceRoot":""}